// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelNotification = `-- name: CancelNotification :one
UPDATE notifications
SET
    status = 'cancelled'
WHERE
    id = $1
RETURNING id, subject, message, author_id, email_to, telegram_chat_id, channel, status, attempts, scheduled_at, sent_at, created_at, updated_at
`

// This query performs a "soft delete" by changing the status to 'cancelled'.
// We never truly delete data, we just change its state.
func (q *Queries) CancelNotification(ctx context.Context, id pgtype.UUID) (Notification, error) {
	row := q.db.QueryRow(ctx, cancelNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.AuthorID,
		&i.EmailTo,
		&i.TelegramChatID,
		&i.Channel,
		&i.Status,
		&i.Attempts,
		&i.ScheduledAt,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
                           subject,
                           message,
                           author_id,
                           email_to,
                           telegram_chat_id,
                           channel,
                           status,
                           attempts,
                           scheduled_at
) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
RETURNING id, subject, message, author_id, email_to, telegram_chat_id, channel, status, attempts, scheduled_at, sent_at, created_at, updated_at
`

type CreateNotificationParams struct {
	Subject        string             `json:"subject"`
	Message        string             `json:"message"`
	AuthorID       pgtype.Text        `json:"author_id"`
	EmailTo        pgtype.Text        `json:"email_to"`
	TelegramChatID pgtype.Int8        `json:"telegram_chat_id"`
	Channel        ChannelType        `json:"channel"`
	Status         NotificationStatus `json:"status"`
	Attempts       int16              `json:"attempts"`
	ScheduledAt    pgtype.Timestamptz `json:"scheduled_at"`
}

// This query inserts a new notification into the database.
func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.Subject,
		arg.Message,
		arg.AuthorID,
		arg.EmailTo,
		arg.TelegramChatID,
		arg.Channel,
		arg.Status,
		arg.Attempts,
		arg.ScheduledAt,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.AuthorID,
		&i.EmailTo,
		&i.TelegramChatID,
		&i.Channel,
		&i.Status,
		&i.Attempts,
		&i.ScheduledAt,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, subject, message, author_id, email_to, telegram_chat_id, channel, status, attempts, scheduled_at, sent_at, created_at, updated_at FROM notifications
WHERE id = $1
`

// This query retrieves a single notification by its unique UUID.
func (q *Queries) GetNotificationByID(ctx context.Context, id pgtype.UUID) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.AuthorID,
		&i.EmailTo,
		&i.TelegramChatID,
		&i.Channel,
		&i.Status,
		&i.Attempts,
		&i.ScheduledAt,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNotificationStatus = `-- name: UpdateNotificationStatus :one
UPDATE notifications
SET
    status = $2,
    attempts = $3,
    sent_at = $4
WHERE
    id = $1
RETURNING id, subject, message, author_id, email_to, telegram_chat_id, channel, status, attempts, scheduled_at, sent_at, created_at, updated_at
`

type UpdateNotificationStatusParams struct {
	ID       pgtype.UUID        `json:"id"`
	Status   NotificationStatus `json:"status"`
	Attempts int16              `json:"attempts"`
	SentAt   pgtype.Timestamptz `json:"sent_at"`
}

// This query updates the status, attempts count, and sent_at timestamp of a notification.
func (q *Queries) UpdateNotificationStatus(ctx context.Context, arg UpdateNotificationStatusParams) (Notification, error) {
	row := q.db.QueryRow(ctx, updateNotificationStatus,
		arg.ID,
		arg.Status,
		arg.Attempts,
		arg.SentAt,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.AuthorID,
		&i.EmailTo,
		&i.TelegramChatID,
		&i.Channel,
		&i.Status,
		&i.Attempts,
		&i.ScheduledAt,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
