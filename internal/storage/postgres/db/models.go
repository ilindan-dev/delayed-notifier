// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChannelType string

const (
	ChannelTypeEmail    ChannelType = "email"
	ChannelTypeTelegram ChannelType = "telegram"
)

func (e *ChannelType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChannelType(s)
	case string:
		*e = ChannelType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChannelType: %T", src)
	}
	return nil
}

type NullChannelType struct {
	ChannelType ChannelType `json:"channel_type"`
	Valid       bool        `json:"valid"` // Valid is true if ChannelType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChannelType) Scan(value interface{}) error {
	if value == nil {
		ns.ChannelType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChannelType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChannelType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChannelType), nil
}

type NotificationStatus string

const (
	NotificationStatusScheduled NotificationStatus = "scheduled"
	NotificationStatusSent      NotificationStatus = "sent"
	NotificationStatusFailed    NotificationStatus = "failed"
	NotificationStatusCancelled NotificationStatus = "cancelled"
)

func (e *NotificationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationStatus(s)
	case string:
		*e = NotificationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationStatus: %T", src)
	}
	return nil
}

type NullNotificationStatus struct {
	NotificationStatus NotificationStatus `json:"notification_status"`
	Valid              bool               `json:"valid"` // Valid is true if NotificationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationStatus), nil
}

type Notification struct {
	ID             pgtype.UUID        `json:"id"`
	Subject        string             `json:"subject"`
	Message        string             `json:"message"`
	AuthorID       pgtype.Text        `json:"author_id"`
	EmailTo        pgtype.Text        `json:"email_to"`
	TelegramChatID pgtype.Int8        `json:"telegram_chat_id"`
	Channel        ChannelType        `json:"channel"`
	Status         NotificationStatus `json:"status"`
	Attempts       int16              `json:"attempts"`
	ScheduledAt    pgtype.Timestamptz `json:"scheduled_at"`
	SentAt         pgtype.Timestamptz `json:"sent_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type Notifications202509 struct {
	ID             pgtype.UUID        `json:"id"`
	Subject        string             `json:"subject"`
	Message        string             `json:"message"`
	AuthorID       pgtype.Text        `json:"author_id"`
	EmailTo        pgtype.Text        `json:"email_to"`
	TelegramChatID pgtype.Int8        `json:"telegram_chat_id"`
	Channel        ChannelType        `json:"channel"`
	Status         NotificationStatus `json:"status"`
	Attempts       int16              `json:"attempts"`
	ScheduledAt    pgtype.Timestamptz `json:"scheduled_at"`
	SentAt         pgtype.Timestamptz `json:"sent_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}
